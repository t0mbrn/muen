#!/bin/bash

if [ ! $# -eq 2 ]; then
	echo "Usage: $0 <config_file> <build ID>"
	exit 1
fi

BUILDID=$2

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source $SCRIPTDIR/args.sh
source $SCRIPTDIR/func.sh

WORKDIR=$SCRIPTDIR/../../..
MULOG=$SCRIPTDIR/../mulog.py

SAVE_ARTIFACTS=0

declare log_pid

# servers to kill on exit
KILL_ON_EXIT_PIDS=()

MAKE="make -j$NUM_CPUS"

export AMT_PASSWORD=$AMT_PASSWORD
export QEMU_SSH_PORT=$QEMU_SSH_PORT
export BUILD_OUTPUT_VERBOSE=1
export BUILD_OUTPUT_NOCOLOR=1

trap cleanup EXIT

acquire_file_lock()
{
	while [ -f $LOCK ]; do
		log "$0 already running with PID `cat $LOCK`, waiting ..."
		sleep 10
	done

	echo $$ > $LOCK
}

release_file_lock()
{
	if [ `cat $LOCK` -eq $$ ]; then
		rm -f $LOCK
	fi
}

cleanup()
{
	local pid
	for pid in ${KILL_ON_EXIT_PIDS[@]}; do
		kill -kill $pid >>$LOGFILE 2>&1 || true
	done
	release_file_lock
	screen -wipe >>$LOGFILE 2>&1
}

save_artifacts()
{
	cp $WORKDIR/emulate/emulate.out $CURRENT_EMUL_LOGDIR >>$LOGFILE 2>&1
	cp $WORKDIR/emulate/serial.out $CURRENT_EMUL_LOGDIR >>$LOGFILE 2>&1
}

passed()
{
	log "State -> PASSED"
	exit 0
}

failed()
{
	log "State -> FAILED"
	if [ $SAVE_ARTIFACTS -ne 0 ]; then
		save_artifacts
	fi
	exit 1
}

not_expect()
{
	local file=$1
	local pattern=$2
	log "Not expect pattern '$pattern' in file '$file'"
	$MULOG $file | grep "$pattern" >>$LOGFILE 2>&1
	if [ $? -eq 0 ]; then
		log "Found unexpected pattern '$pattern' in '$file'"
		failed
	fi
}

expect()
{
	local file=$1
	local pattern=$2
	log "Expect pattern '$pattern' in file '$file'"
	$MULOG $file | grep "$pattern" >>$LOGFILE 2>&1
	if [ $? -ne 0 ]; then
		log "Expected pattern '$pattern' not found in '$file'"
		failed
	fi
}

expect_from_file()
{
	local pattern_file=$1
	local path=$2

	while IFS= read -r line
	do
		local file=`echo "$line" | cut -d\; -f1`
		local pattern=`echo "$line" | cut -d\; -f2`
		local neg=`echo "$line" | cut -d\; -f3`
		if [ -z "$file" ]; then
			continue
		fi

		if [ -z "$neg" ]; then
			expect $path/$file "$pattern"
		else
			not_expect $path/$file "$pattern"
		fi
	done < $pattern_file
}

file_exists()
{
	if [ ! -f $1 ]; then
		log "File '$1' does not exist"
		failed
	fi
}

basename_noext()
{
	fname=${1##*/}
	echo ${fname%.*}
}

hw_targetlogdir()
{
	local system=$(basename_noext $1)
	local hardware=$(basename_noext $2)

	echo $LOGDIR/$system-$hardware
}

execute_n()
{
	local cmd=$1
	local times=$2
	local sleep=$3
	local status=1

	log "Executing command '$cmd' [$times tries, sleep $sleep sec(s)]"

	local i
	for i in `seq $times`; do
		$cmd >> $LOGFILE 2>&1
		status=$?
		if [ $status -eq 0 ]; then
			return
		else
			log "Try $i of $times failed, retry in $sleep second(s)"
		fi
		sleep $sleep
	done

	log "! Command '$cmd' failed (status $status)"
	failed
}

set_buildvars()
{
	IFS='|' read -ra build_vars <<< "$1"

	local i
	for i in "${build_vars[@]}"
	do
		log "Exporting build variable '$i'"
		export "$i"
	done
}

unset_buildvars()
{
	IFS='|' read -ra build_vars <<< "$1"

	local i
	for i in "${build_vars[@]}"
	do
		unset `echo $i | cut -d\= -f1`
	done
}

ssh_exec()
{
	local lnx1_login=$1
	local ssh_port=$2
	local connect_attempts=$3
	local script=$4
	local ssh_wait=$5

	execute_n "$SSH -p $ssh_port -i $SSH_KEY $lnx1_login mkdir -p /usr/local/bin" $connect_attempts 1
	execute "$SCP -P $ssh_port -i $SSH_KEY $SCRIPTDIR/target_scripts/* $lnx1_login:/usr/local/bin"
	execute_n "$SSH -p $ssh_port -i $SSH_KEY $lnx1_login $SSH $LNX2_LOGIN mkdir -p /usr/local/bin" $connect_attempts 1
	execute "$SSH -p $ssh_port -i $SSH_KEY $lnx1_login $SCP /usr/local/bin $LNX2_LOGIN:/usr/local"
	execute "$SSH -p $ssh_port -i $SSH_KEY $lnx1_login $script"
	if [ ! -z "$ssh_wait" ]; then
		log "Waiting $ssh_wait seconds after integscript"
		sleep $ssh_wait
	fi
}

emulate()
{
	local system=$2
	local hardware=$3
	local intscr=$4
	local expect=$5

	export CURRENT_EMUL_LOGDIR=$1

	SAVE_ARTIFACTS=1
	execute "$MAKE emulate HARDWARE=$hardware SYSTEM=$system"

	ssh_exec root@localhost $QEMU_SSH_PORT $QEMU_SSH_ATTEMPTS $intscr

	save_artifacts
	SAVE_ARTIFACTS=0

	execute "$MAKE -C emulate clean"

	expect_from_file $SCRIPTDIR/expect.common "$CURRENT_EMUL_LOGDIR"

	if [ ! -z "$expect" ]; then
		file_exists $expect
		expect_from_file $expect "$CURRENT_EMUL_LOGDIR"
	fi

	unset CURRENT_EMUL_LOGDIR
}

deploy_to_emul()
{
	local i
	for ((i = 0; i < ${#TARGETS_EMUL[@]}; i++)); do
		local item="${TARGETS_EMUL[$i]}"
		system=`echo $item | cut -d\; -f1`
		hardware=`echo $item | cut -d\; -f2`
		integscript=`echo $item | cut -d\; -f3`
		expect=`echo $item | cut -d\; -f4`
		buildvars=`echo $item | cut -d\; -f5`
		target_logdir=$(hw_targetlogdir "$system" "$hardware")
		execute "mkdir -p $target_logdir"

		log "Deploying to QEMU/KVM: system '$system', config '$hardware'"

		set_buildvars "$buildvars"
		emulate $target_logdir $system $hardware $integscript $expect
		unset_buildvars "$buildvars"
	done
}

capture_output()
{
	local target_logdir=$1
	local cmd=$2

	screen -S integ -m -D -L -Logfile $target_logdir/serial.out /bin/bash &
	log_pid=$!
	KILL_ON_EXIT_PIDS+=$log_pid
	# manual forking needs some time for screen to see the socket.
	local i
	for i in `seq 4`; do screen -ls && break || sleep 0.5; done >>$LOGFILE 2>&1
	screen -S $log_pid.integ -X colon "logfile flush 0^M"
	# required to avoid \r\r\n with amtterm
	screen -S $log_pid.integ -X stuff "stty -onlcr^M"
	screen -S $log_pid.integ -X stuff "$cmd^M"
}

hw_deploy()
{
	local target_logdir=$1
	local system=$2
	local hardware=$3
	local intscr=$4
	local expect=$5
	local ssh_wait=$6

	execute "$MAKE -C kernel clean"
	execute "$MAKE deploy HARDWARE=$hardware SYSTEM=$system"

	# be sure that power cycle is complete if target was already running
	execute "sleep 3"

	date -u +%Y%m%d > $ROOT/current_date
	cd $ROOT; PYTHONUNBUFFERED=1 python3 -m http.server 10000 >$target_logdir/http.out 2>&1 &
	local pid_http=$!
	KILL_ON_EXIT_PIDS+=($pid_http)
	cd $WORKDIR

	ssh_exec root@192.168.254.100 22 100 $integscript $ssh_wait

	# give serial output some time to reach the target logdir
	execute "sleep 2"

	kill $log_pid >>$LOGFILE 2>&1
	kill $pid_http >>$LOGFILE 2>&1

	execute "$MAKE -C deploy shutdown"
	execute "$MAKE -C deploy clean"

	expect_from_file $SCRIPTDIR/expect.common "$target_logdir"
	expect_from_file $SCRIPTDIR/expect.hw_common "$target_logdir"

	if [ ! -z "$expect" ]; then
		file_exists $expect
		expect_from_file $expect "$target_logdir"
	fi
}

deploy_to_hardware()
{
	local item
	for item in ${TARGETS_HW[@]}; do
		ip=`echo $item | cut -d\; -f1`
		system=`echo $item | cut -d\; -f2`
		hardware=`echo $item | cut -d\; -f3`
		integscript=`echo $item | cut -d\; -f4`
		expect=`echo $item | cut -d\; -f5`
		buildvars=`echo $item | cut -d\; -f6`
		ssh_wait=`echo $item | cut -d\; -f7`
		target_logdir=$(hw_targetlogdir "$system" "$hardware")
		execute "mkdir -p $target_logdir"

		log "Deploying system '$system' to hardware '$hardware'"
		if [ -z "$ip" ]; then
			# power bar with xhci debug
			log "Using EPC power mechanism"
			export TARGET_PWR_MECH=epc
			capture_output $target_logdir "$LOG_CMD_XHCI"
		else
			# Intel AMT
			log "Using Intel AMT power mechanism for target IP $ip"
			export TARGET_PWR_MECH=amt
			export TARGET_IP=$ip
			execute "ping -c 6 $ip"
			capture_output $target_logdir "$LOG_CMD_AMT $ip"
		fi

		set_buildvars "$buildvars"
		hw_deploy $target_logdir $system $hardware $integscript "$expect" "$ssh_wait"
		unset_buildvars "$buildvars"
	done
}

generate_metrics()
{
	execute "make -C kernel metrics"
}

mkdir -p $LOGDIR

echo "Logging to file $LOGFILE"

acquire_file_lock

execute "cd $WORKDIR"
execute "$MAKE -C deploy clean"
execute "$MAKE -C emulate clean"

# Build GRUB2 for both pc and efi
execute "$MAKE -C contrib/grub"
execute "$MAKE -C contrib/grub MUEN_EFI=1"

deploy_to_emul
deploy_to_hardware
generate_metrics

passed
